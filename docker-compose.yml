version: '3.8'

services:
  # MySQL数据库服务
  mysql:
    image: mysql:8.0
    container_name: ai_manager_mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-ai_root_2024}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-ai_manager}
      MYSQL_USER: ${MYSQL_USER:-ai_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-ai_pass_2024}
      TZ: Asia/Shanghai
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./deploy/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --max_connections=200
      - --max_allowed_packet=64M
    networks:
      - ai_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: ai_manager_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-ai_redis_2024}
    networks:
      - ai_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Python后端服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ai_manager_backend
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # 数据库配置
      DATABASE_URL: mysql://ai_user:ai_pass_2024@mysql:3306/ai_manager
      REDIS_URL: redis://:ai_redis_2024@redis:6379/0
      
      # 应用配置
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here-please-change-in-production}
      DEBUG: ${DEBUG:-false}
      
      # 企业微信配置
      WECHAT_CORP_ID: ${WECHAT_CORP_ID}
      WECHAT_CORP_SECRET: ${WECHAT_CORP_SECRET}
      WECHAT_AGENT_ID: ${WECHAT_AGENT_ID}
      
      # AI服务配置
      AI_SERVICE_KEY: ${AI_SERVICE_KEY}
      AI_SERVICE_URL: ${AI_SERVICE_URL}
      
      # 文件存储
      UPLOAD_PATH: /app/data/uploads
      BACKUP_PATH: /app/data/backups
      
      # Python优化
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
      
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./data/uploads:/app/data/uploads
      - ./data/backups:/app/data/backups
      - ./logs:/app/logs
    networks:
      - ai_network
    command: >
      sh -c "
        echo '等待数据库启动...' &&
        sleep 10 &&
        echo '运行数据库迁移...' &&
        python migrate.py migrate &&
        echo '启动应用服务器...' &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: ai_manager_nginx
    restart: always
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/usr/share/nginx/html
      - ./data/uploads:/usr/share/nginx/uploads:ro
      - ./deploy/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - ai_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Docker网络
networks:
  ai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local